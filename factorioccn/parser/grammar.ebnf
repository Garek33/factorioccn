@@grammar :: fccn
@@eol_comments :: /#.*?$/

start::Script = {lines+:statement | () } $;
statement = combinatorstmt | test;

test::Test = 'test' ~ name:identifier '{' {lines+:teststmt} '}';
teststmt::Teststmt = tick:number ':' ','.{cmds:testexpr} terminator;
testexpr = @:testcmd | @:testhold;
testcmd::Testcmd = wire:identifier op:testop signals:constframe;
testop = @:testsets | @:testexpects;
testsets::Testsets = '+=';
testexpects::Testexpects = '=~';
testhold::Testhold = 'for' count:number (cmds+:testcmd | '{' ','.{cmds+:testcmd} '}');

combinatorstmt::Combinatorstmt = [input:wireset '->'] action:combinator '->' ~ output:wireset terminator ;
wireset::Wires = wires+:wire [',' wires+:wire] ;
wire = identifier;
combinator = arithmetic | decider | constcombinator;

decider::Decider = left:signaltype op:logiop right:argument ':' ~ result:deciderout ;
deciderout = signal:signaltype value:['=' '1'] ;
logiop = '>' | '>=' | '=' | '!=' | '<=' | '<' ;

arithmetic::Arithmetic = result:signaltype '=' left:signaltype op:arithop ~ right:argument ;
arithop = '+' | '-' | '*' | '/' | '%' | '**' | '>>' | '<<' | '&' | '|' | '^' ;

constcombinator::ConstantCombinator = signals:constframe ;
constframe::Constframe = '{' ','.{signals+:signal} '}';

argument = signaltype | number ;
signal = type:signaltype ':' value:number;

@name
identifier = /[a-zA-Z_][0-9a-zA-Z_]*/ ;
signaltype = /[a-zA-Z_][0-9a-zA-Z_-]*/;
number::int = /-?[0-9]+/ ;
terminator = [';'];
