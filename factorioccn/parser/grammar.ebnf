@@grammar :: fccn
@@eol_comments :: /#.*?$/

start::Script = {lines+:statement | () } $;
statement = combinatorstmt ;

combinatorstmt::Combinatorstmt = [input:wireset '->'] action:combinator '->' ~ output:wireset terminator ;
wireset::Wires = wires+:wire [',' wires+:wire] ;
wire = identifier;
combinator = arithmetic | decider | constcombinator;

decider::Decider = left:stype op:logiop ~ right:argument ':' result:deciderout ;
deciderout = signal:stype value:['(1)'] ;
logiop = '>' | '>=' | '=' | '!=' | '<=' | '<' ;

arithmetic::Arithmetic = result:stype '=' ~ left:stype op:arithop right:argument ;
arithop = '+' | '-' | '*' | '/' | '%' | '**' | '>>' | '<<' | '&' | '|' | '^' ;

constcombinator::ConstantCombinator = signals:constframe ;
constframe::Constframe = '{' ','.{signals+:signal} '}';

argument = identifier | number ;
signal = type:stype '(' value:number ')';

@name
identifier = /[a-zA-Z_][0-9a-zA-Z_]*/ ;
stype = /[a-zA-Z_][0-9a-zA-Z_-]*/;
number::int = /-?[0-9]+/ ;
terminator = [';'];
